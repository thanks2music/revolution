import { Router, Request, Response } from 'express';
import { WordPressGraphQLTypedService } from '../services/wordpress-graphql-typed.service.js';
import { PostStatusEnum } from '../generated/graphql.js';

const router = Router();

router.get('/test/typed/connection', async (req: Request, res: Response) => {
  try {
    const wpService = new WordPressGraphQLTypedService();
    const isConnected = await wpService.testConnection();

    res.json({
      success: isConnected,
      message: isConnected
        ? 'Successfully connected to WordPress GraphQL API'
        : 'Failed to connect to WordPress GraphQL API',
      endpoint: wpService.getEndpoint()
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Connection test failed',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

router.post('/test/typed/create-post', async (req: Request, res: Response) => {
  try {
    const authToken = req.body.authToken || process.env.WORDPRESS_AUTH_TOKEN;

    if (!authToken) {
      return res.status(400).json({
        success: false,
        error: 'Authentication token is required'
      });
    }

    const wpService = new WordPressGraphQLTypedService(undefined, authToken);

    const result = await wpService.createPost({
      title: 'Typed Post: Created with GraphQL Code Generator',
      content: '<p>This post was created using fully typed GraphQL operations generated by GraphQL Code Generator.</p><ul><li>Type-safe mutations</li><li>Auto-completion in IDE</li><li>Compile-time error checking</li></ul>',
      status: PostStatusEnum.Draft
    });

    res.json({
      success: true,
      message: 'Typed post created successfully',
      post: result?.post,
      adminUrl: `http://localhost:8080/wp-admin/post.php?post=${result?.post?.databaseId}&action=edit`
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Failed to create typed post',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

router.post('/test/typed/create-post-extended', async (req: Request, res: Response) => {
  try {
    const { authToken, categoryIds } = req.body;

    if (!authToken && !process.env.WORDPRESS_AUTH_TOKEN) {
      return res.status(400).json({
        success: false,
        error: 'Authentication token is required'
      });
    }

    const wpService = new WordPressGraphQLTypedService(
      undefined,
      authToken || process.env.WORDPRESS_AUTH_TOKEN
    );

    const result = await wpService.createPostExtended({
      title: 'Typed Extended Post: Full Field Support',
      content: '<h2>型安全な拡張投稿</h2><p>GraphQL Code Generatorで生成された型を使用した投稿です。</p><ul><li>完全な型推論</li><li>カテゴリー・タグ対応</li><li>スラッグ指定</li><li>抜粋文対応</li></ul>',
      slug: 'typed-extended-post-full-field-support',
      excerpt: 'GraphQL Code Generatorで生成された型を使用した拡張投稿の例',
      status: PostStatusEnum.Draft,
      categoryIds: categoryIds || ['dGVybTox'],
      commentStatus: 'open',
      pingStatus: 'closed'
    });

    res.json({
      success: true,
      message: 'Typed extended post created successfully',
      post: result?.post,
      typeInfo: {
        hasCategories: !!result?.post?.categories,
        categoriesCount: result?.post?.categories?.nodes?.length || 0,
        hasAuthor: !!result?.post?.author,
        authorName: result?.post?.author?.node?.name
      },
      adminUrl: `http://localhost:8080/wp-admin/post.php?post=${result?.post?.databaseId}&action=edit`
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Failed to create typed extended post',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

router.get('/test/typed/categories-tags', async (req: Request, res: Response) => {
  try {
    const wpService = new WordPressGraphQLTypedService();
    const result = await wpService.getCategoriesAndTags();

    res.json({
      success: true,
      categories: result.categories?.nodes || [],
      tags: result.tags?.nodes || [],
      counts: {
        categories: result.categories?.nodes?.length || 0,
        tags: result.tags?.nodes?.length || 0
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Failed to fetch categories and tags',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

export default router;